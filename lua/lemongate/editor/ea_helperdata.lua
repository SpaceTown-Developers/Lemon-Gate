local Data = LEMON.API.HelperData

/*---------------------------------------------------------------------------
	Total functions: 1086
	Total events: 19
	
	Documented functions: 993
	Documented events: 19
	
	Undocumented functions: 93
	Undocumented events: 0
	
	Generated at: 05/06/14 23:16:31
---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
	Events
---------------------------------------------------------------------------*/

// D
Data["dupeFinished<>"] = "Called once the advanced duplicator has finished pasting the chip and all constrained entitys."

// K
Data["keypress<n,e>"] = "Called when the owner of the gate presses down a key (key is given as ascii)."
Data["keyrelease<n,e>"] = "Called when the owner of the gate releases a key (key is given as ascii)."

// L
Data["loadFromDupe<xbf>"] = "Loads a buffer of data from the advanced duplicator file."

// O
Data["onDamage<e,e,n,v>"] = "Called when an entity takes damage (Entity, Attacker, Damage, Damage Pos). "
Data["onKill<e,e,e>"] = "Called when a player or npc is killed (Player, Inflictor, Attacker)."

// P
Data["playerChat<e,s=s>"] = "Called when a player says somthing, Return string to change what is said."
Data["playerJoin<e>"] = "Called when a player joins the server."
Data["playerQuit<e>"] = "Called when a player leaves the server."
Data["playerSpawn<e>"] = "Called when a player spawns."
Data["playerSpeak<e=b>"] = "Called when a player uses voip, return true to block players audio. "
Data["propBreak<e,e>"] = "Called when an entity breaks (Entity, Attacker). "

// R
Data["receiveBuffer<s,e,xbf>"] = "Called when the LemonGate receives a buffer. String is message and Entity is sender."

// S
Data["saveToDupe<=xbf>"] = "Saves a buffer of data to the advanced duplicators file."
Data["shutdown<>"] = "Called before the lemongate shuts down."

// T
Data["think<>"] = "Called every think."
Data["tick<>"] = "Called every tick."
Data["trigger<s,s>"] = "Called when an input is changed."

// U
Data["use<e>"] = "Called when a player presses use on the LemonGate."

/*---------------------------------------------------------------------------
	Functions
---------------------------------------------------------------------------*/

// A
Data["aabbMax(e:=v)"] = "Return the axis-aligned maximum bounding box of an entity."
Data["aabbMax(p:=v)"] = "Return the axis-aligned maximum bounding box of a physics object."
Data["aabbMin(e:=v)"] = "Return the axis-aligned minimum bounding box of an entity."
Data["aabbMin(p:=v)"] = "Return the axis-aligned minimum bounding box of a physics object."
Data["abs(n=n)"] = "Returns the absolute value of a number."
Data["abs(q=n)"] = "Returns the magnitude (length) of a quaternion."
Data["abs(v:=v)"] = "Returns the absolute value of a vector."
Data["acos(n=n)"] = "Returns the inverse cosine of (number degrees)."
Data["acosr(n=n)"] = "Returns the inverse cosine of (number radians)."
Data["add(t:t)"] = "Adds the second table to the first."
Data["aimEntity(e:=e)"] = "Returns the aim entity of an entity (entity must be a player)."
Data["aimNormal(e:=v)"] = "Returns the aim hit normal of an entity (entity must be a player)."
Data["aimPos(e:=v)"] = "Returns the aim position of an entity (entity must be a player)."
Data["airDensity(=n)"] = "Returns the air density of the server."
Data["alpha(c:=n)"] = "Returns the alpha value of a color."
Data["ang(=a)"] = "Creates an angle."
Data["ang(e:=a)"] = "Returns the angles PYR of an entity."
Data["ang(n,n,n=a)"] = "Creates an angle PYR."
Data["ang(n=a)"] = "Creates an angle."
Data["ang(p:=a)"] = "Returns the angles PYR of a physics object."
Data["angSpeedLimit(=n)"] = "Returns the angular speed limit of the server."
Data["angVel(e:=a)"] = "Returns the angular velocity of an entity."
Data["angVel(p:=a)"] = "Returns the angular velocity of a physics object."
Data["angVelVector(e:=v)"] = "Returns the angular velocity in vector form of an entity."
Data["angVelVector(p:=v)"] = "Returns the angular velocity in vector form of a physics object."
Data["angleArray(...=xa*)"] = "Creates an array."
Data["angleArray(=xa*)"] = "Creates an array."
Data["angnorm(a=a)"] = "Wraps the components of an angle between -180 and 180."
Data["animation(h:s=n)"] = "Gets lookup number of an animation."
Data["animationLength(h:=n)"] = "Gets the lengh of the animation running on H."
Data["applyAngForce(e:a)"] = "Applies an angular force to an entity."
Data["applyAngForce(p:a)"] = "Applies an angular force to a physics object."
Data["applyForce(e:v)"] = "Applies a vector force to entity."
Data["applyForce(p:v)"] = "Applies a vector force to a physics object."
Data["applyOffsetForce(e:v,v)"] = "Applies an offset vector force to an entity."
Data["applyOffsetForce(p:v,v)"] = "Applies an offset vector force to a physics object."
Data["applyTorque(e:v)"] = "Applies a vector torque force to an entity."
Data["applyTorque(p:v)"] = "Applies a vector torque force to a physics object."
Data["armor(e:=n)"] = "Returns the armor of an entity (entity must be a player)."
Data["asGameModel(s=s)"] = "Converts a hologram model into a game model."
Data["asin(n=n)"] = "Returns the inverse sine of (number degrees)."
Data["asinr(n=n)"] = "Returns the inverse sine (number radians)."
Data["atan(n,n=n)"] = "Returns the inverse tangent of (number degrees)."
Data["atan(n=n)"] = "Returns the inverse tangent of (number degrees)."
Data["atanr(n,n=n)"] = "Returns the inverse tangent (number radians)."
Data["atanr(n=n)"] = "Returns the inverse tangent (number radians)."
Data["attachmentAng(e:n=a)"] = "Returns the attachment angle N of E."
Data["attachmentAng(e:s=v)"] = "Returns the attachment angle S of E."
Data["attachmentPos(e:n=v)"] = "Returns the attachment vector N of E."
Data["attachmentPos(e:s=v)"] = "Returns the attachment vector S of E."

// B
Data["bearing(e:v=n)"] = "Returns the bearing between an entity and a target vector."
Data["bearing(p:v=n)"] = "Returns the bearing between a physics object and a target vector."
Data["bearing(v,a,v=n)"] = "Return the bearing between a vector facing an angle and a target vector."
Data["blockPlayer(h:e)"] = "Blocks a player from seeing the hologram."
Data["blue(c:=n)"] = "Returns the blue value of a color."
Data["boneCount(h:=n)"] = "Returns the ammount of bones of a hologram."
Data["boxCenter(e:=v)"] = "Returns the center position of an entity's bounding box."
Data["boxMax(e:=v)"] = "Returns the highest corner of an entity's bounding box."
Data["boxMin(e:=v)"] = "Returns the lowest corner of an entity's bounding box."
Data["boxSize(e:=v)"] = "Returns the size of an entity's bounding box."
Data["buffer(=xbf)"] = "Creates a new buffer object."

// C
Data["canMakeHologram(=b)"] = "Returns true if a hologram can be created."
Data["canRead(xbf:=b)"] = ""
Data["canSpawn(=b)"] = "Returns true if a prop can be created."
Data["cbrt(n=n)"] = "Returns the cube root of (number)."
Data["ceil(a,n=a)"] = "Rounds the components of (angle PYR) up to (number)'s decimal precision."
Data["ceil(a=a)"] = "Rounds the components of (angle PYR) up to the nearest integer."
Data["ceil(n,n=n)"] = "Rounds (number 1) up to (number 2)'s decimal precision."
Data["ceil(n=n)"] = "Rounds (number) up to nearest integer."
Data["ceil(v,n=v)"] = "Rounds the components of (vector XYZ) up to (number)'s decimal precision."
Data["ceil(v=v)"] = "Rounds the components of (vector XYZ) up to nearest integer."
Data["changePitch(a:n)"] = "Changes the pitch on the angle with out returning a new angle."
Data["changeRoll(a:n)"] = "Changes the roll on the angle with out returning a new angle."
Data["changeYaw(a:n)"] = "Changes the yaw on the angle with out returning a new angle."
Data["clamp(a,a,a=a)"] = "Clamps (angle value) between (angle min) and (angle max)."
Data["clamp(n,n,n=n)"] = "Clamps (number value) between (number min) and (number max)."
Data["clamp(v,v,v=v)"] = "Clamps (vector value) between (vector  min) and (vector  max)."
Data["clamp(xv2,xv2,xv2=xv2)"] = "Clamps (vector2 value) between (vector2  min) and (vector2  max)."
Data["class(e:=s)"] = "Returns the class of an entity."
Data["clear(xa*)"] = "Clears the array."
Data["clear(xc*)"] = "Clears the array."
Data["clear(xe*)"] = "Clears the array."
Data["clear(xh*)"] = ""
Data["clear(xn*)"] = "Clears the array."
Data["clear(xq*)"] = "Clears the array."
Data["clear(xrd:)"] = "Clears the ranger data of the ranger."
Data["clear(xs*)"] = "Clears the array."
Data["clear(xt*)"] = "Clears the array."
Data["clear(xv*)"] = "Clears the array."
Data["clear(xwl*)"] = ""
Data["clear(xxv2*)"] = "Clears the array."
Data["clearFilter(xrd:e)"] = "Clears the entity filter of a ranger."
Data["clearFilter(xtr)"] = "Clears the entity filter of a trace."
Data["color(n,n,n,n=c)"] = "Creates a color RGBA."
Data["color(n,n,n=c)"] = "Creates a color RGB."
Data["colorArray(...=xc*)"] = "Creates an array."
Data["colorArray(=xc*)"] = "Creates an array."
Data["concat(t:s=s)"] = "Concatinates a table into a string."
Data["concmd(s,s=b)"] = "Executes a concomand on the owner of the LemonGate."
Data["concmd(s=b)"] = "Executes a concomand on the owner of the LemonGate."
Data["conj(q=q)"] = "Returns the conjugate of a quaternion."
Data["convertUnit(s,s,n=n)"] = ""
Data["copy(t:=t)"] = "Copies a table to a new table."
Data["coroutine(f=xcr)"] = "Creats a new coroutine using a function."
Data["cos(n=n)"] = "Returns the cosine of (number degrees)."
Data["cosh(n=n)"] = "Returns the hyperbolic cosine of (number degrees)."
Data["coshr(n=n)"] = "Returns the hyperbolic cosine of (number radians)."
Data["cosr(n=n)"] = "Returns the cosine of (number radians)."
Data["cot(n=n)"] = "Returns the cotangent of (number degrees)."
Data["coth(n=n)"] = "Returns the hyperbolic cotangent of (number degrees)."
Data["cothr(n=n)"] = "Returns the hyperbolic cotangent of (number radians)."
Data["cotr(n=n)"] = "Returns the cotangent of (number radians)."
Data["count(t:=n)"] = "Returns the amount of entries in a table."
Data["count(xa*=n)"] = "Returns how many values the array contains."
Data["count(xc*=n)"] = "Returns how many values the array contains."
Data["count(xe*=n)"] = "Returns how many values the array contains."
Data["count(xh*=n)"] = ""
Data["count(xn*=n)"] = "Returns how many values the array contains."
Data["count(xq*=n)"] = "Returns how many values the array contains."
Data["count(xs*=n)"] = "Returns how many values the array contains."
Data["count(xt*=n)"] = "Returns how many values the array contains."
Data["count(xv*=n)"] = "Returns how many values the array contains."
Data["count(xwl*=n)"] = ""
Data["count(xxv2*=n)"] = "Returns how many values the array contains."
Data["cpuAverage(=n)"] = "Returns the amount of cpu time used on average in microseconds."
Data["cpuTime(=n)"] = "Returns the amount of cpu time used so far in the current execution in microseconds."
Data["cross(v:v=v)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["cross(xv2:v=xv2)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["csc(n=n)"] = "Returns the cosecant of (number degrees)."
Data["csch(n=n)"] = "Returns the hyperbolic cosecant of (number degrees)."
Data["cschr(n=n)"] = "Returns the hyperbolic cosecant of (number radians)."
Data["cscr(n=n)"] = "Returns the cosecant of (number radians)."
Data["curTime(=n)"] = "Returns the time since server start in seconds."

// D
Data["dealDamage(e:n)"] = "Deals damage to an entity."
Data["defaultZero(xrd:=b)"] = "Returns true if a trace is set to default zero."
Data["defaultZero(xrd:b)"] = "Sets the defaulty zero of a trace."
Data["destroy(e:)"] = "Creates an array."
Data["destroy(e:v,b)"] = "Creates an array."
Data["distance(v:v=n)"] = "Return the distance between two vectors."
Data["distance(xrd:=n)"] = "Returns the distance from the renagers start to the rangers hit positions."
Data["distance(xv2:v=n)"] = "Return the distance between two vectors."
Data["distance2(v:v=n)"] = "Returns the squared distance between two vectors."
Data["dot(v:v=n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["dot(xv2:v=n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["driver(e:=e)"] = "Returns the driver of an entity (must be a vehicle)."
Data["duration(xsd:=n)"] = "Returns the duration of a sound."
Data["duration(xsd:n)"] = "Sets the duration of a sound."

// E
Data["egp3DTracker(xwl:n,v)"] = "Creates a 3D tracker object. Arguments are: World position."
Data["egpAlign(xwl:n,n)"] = "Change the horizontal alignment. Works on: text and text layout. Number can be 0, 1 or 2."
Data["egpAlign(xwl:n,n,n)"] = "Change the horizontal and vertical alignment. Works on: text and text layout. Numbers can be 0, 1 or 2."
Data["egpAlpha(xwl:n,n)"] = "Sets the alpha of the given EGP object."
Data["egpAlpha(xwl:n=n)"] = "Returns the alpha of the given EGP object."
Data["egpAngle(xwl:n,n)"] = "Sets the angle of the given EGP object."
Data["egpAngle(xwl:n,xv2,xv2,n)"] = "Rotates the given EGP object around the first vec2 with the second vec2 as offset at angle N."
Data["egpAngle(xwl:n=n)"] = "Returns the angle of the given EGP object."
Data["egpBox(xwl:n,xv2,xv2)"] = "Creates a box object. Arguments are: Index, Position, Size."
Data["egpBoxOutline(xwl:n,xv2,xv2)"] = "Creates an outlined box object. Arguments are: Index, Position, Size."
Data["egpCanSendUmsg(=b)"] = "Returns true if an EGP usermessage can be sent."
Data["egpCircle(xwl:n,xv2,xv2)"] = "Creates a circle object. Arguments are: Index, Position, Size."
Data["egpCircleOutline(xwl:n,xv2,xv2)"] = "Creates an outlined circle object. Arguments are: Index, Position, Size."
Data["egpClear(xwl:)"] = "Resets the EGP."
Data["egpColor(xwl:n,c)"] = "Sets the color of the given EGP object."
Data["egpColor(xwl:n=c)"] = "Returns the color of the given EGP object."
Data["egpCopy(xwl:n,n)"] = "Clones the second object to the first object (will create a new object if it does not exist)."
Data["egpCursor(xwl:e=xv2)"] = "Returns the on-screen aim position of the player."
Data["egpDrawTopLeft(xwl:b)"] = "If true, EGP objects will draw from the top left corner to the bottom right corner of the screen."
Data["egpFidelity(xwl:n,n)"] = "Sets the fidelity (number of vertices) of the given egp object."
Data["egpFidelity(xwl:n=n)"] = "Returns the fidelity (number of vertices) of the given egp object."
Data["egpFont(xwl:n,s)"] = "Change the font. Works on: text and text layout."
Data["egpFont(xwl:n,s,n)"] = "Change the font and size. Works on: text and text layout."
Data["egpGlobalPos(xwl:n=v)"] = "Returns the \"global\" (global meaning it takes the parents' positions into consideration as well) position as a 3D vector. X and Y being the 2D X,Y coordinates, while Z is the angle. Works on: Any object which has X,Y positioning (boxes, circles, wedges, text). "
Data["egpGlobalVertices(xwl:n=xxv2*)"] = "Returns an array of 2D vectors with the \"global\" positions of the vertices in the object. Works on: any object which uses vertices for positioning (triangles, lines, polygons)."
Data["egpHasObject(xwl:n=b)"] = "Returns true if the given EGP object is valid."
Data["egpLine(xwl:n,xv2,xv2)"] = "Creates a line object. Arguments are: Index, Position 1, Position 2"
Data["egpLoadFrame(xwl:s)"] = "Loads the frame with the name S."
Data["egpMaterial(xwl:n,s)"] = "Sets the material of the given EGP object."
Data["egpMaterial(xwl:n=s)"] = "Returns the material of the given EGP object."
Data["egpMaterialFromScreen(xwl:n,e)"] = "Set the material of the given EGP object to the material from another RenderTarget screen."
Data["egpMaxObjects(=n)"] = "Returns the maximum amount of EGP objects allowed by the server."
Data["egpMaxUmsgPerSecond(=n)"] = "Returns the maximum amount EGP user messages allowed by the server."
Data["egpNumObjects(xwl:=n)"] = "Returns the amount of objects the EGP contains."
Data["egpOrder(xwl:n,n)"] = "Set the order the given EGP object is rendered."
Data["egpOrder(xwl:n=n)"] = "Returns the order the given EGP object is rendered. "
Data["egpParent(xwl:n,e)"] = "Parents a 3D tracker object to an entity (will not work for other objects)."
Data["egpParent(xwl:n,n)"] = "Parents the given EGP object to another object."
Data["egpParent(xwl:n=n)"] = "Returns the parent object of the given EGP object."
Data["egpParentToCursor(xwl:n)"] = "Parents the given EGP object to an EGP cursor."
Data["egpPoly(xwl:n,...)"] = "Creates a polygon objects using a vararg of 2d vectors."
Data["egpPoly(xwl:n,xxv2*)"] = "Creates a polygon objects using an array of 2d vectors."
Data["egpPolyOutline(xwl:n,...)"] = "Creates an outlined polygon objects using a vararg of 2d vectors."
Data["egpPolyOutline(xwl:n,xxv2*)"] = "Creates an outlined polygon objects using an array of 2d vectors."
Data["egpPolyUV(xwl:n,...)"] = "Sets the uv position of the polygon using a vararg of 2d vectors."
Data["egpPolyUV(xwl:n,xxv2*)"] = "Sets the uv position of the polygon using an array of 2d vectors."
Data["egpPos(xwl:n,v)"] = "Sets the position of a 3D tracker object (will not work for other objects)."
Data["egpPos(xwl:n,xv2)"] = "Sets the position of the given EGP object."
Data["egpPos(xwl:n=xv2)"] = "Returns the position of the given EGP object."
Data["egpRadius(xwl:n,n)"] = "Sets the corner radius of rounded boxes. Works on: rounded box and rounded box outline."
Data["egpRadius(xwl:n=n)"] = "Returns the corner radius of rounded boxes. Works on: rounded box and rounded box outline."
Data["egpRemove(xwl:n)"] = "Removes the given EGP object."
Data["egpResolution(xwl:xv2,xv2)"] = "Sets the scale of the screen such that the top left corner is equal to the first vector and the bottom right corner is equal to the second vector."
Data["egpRoundedBox(xwl:n,xv2,xv2)"] = "Creates a rounded box object. Arguments are: Index, Position, Size."
Data["egpRoundedBoxOutline(xwl:n,xv2,xv2)"] = "Creates an outlined rounded box object. Arguments are: Index, Position, Size."
Data["egpSaveFrame(xwl:s)"] = "Saves the current frame with the name S."
Data["egpScale(xwl:xv2,xv2)"] = "Sets the scale of the screen's X axis to the first vector and Y axis to the second vector."
Data["egpScrH(e=n)"] = "Returns the player's screen resolution height."
Data["egpScrSize(e=xv2)"] = "Returns the player's screen resolution."
Data["egpScrW(e=n)"] = "Returns the player's screen resolution width."
Data["egpSetText(xwl:n,s)"] = "Changes the text. Works on: text and text layout."
Data["egpSetVertices(xwl:n,xxv2*)"] = ""
Data["egpSize(xwl:n,n)"] = "Change the size. Works on: Any object with width and height size (ie does not work on text, poly, triangle, etc. Note: does work on line)."
Data["egpSize(xwl:n,xv2)"] = "Change the position. Works on: Any object with x and y position (ie does not work on poly, line, triange, etc)."
Data["egpSize(xwl:n=xv2)"] = "Returns the size. Works on: Any object with width and height size (ie box, circle, text layout, etc)."
Data["egpSizeNum(xwl:n=n)"] = "Returns the number size. Works on: Any object with a number size (ie text, text layout, line, wedge, etc) "
Data["egpText(xwl:n,s,xv2)"] = "Creates a text object. Arguments are: Text, Position."
Data["egpTextLayout(xwl:n,s,xv2,xv2)"] = "Creates a text layout object. Arguments are: Text,Position, Size."
Data["egpTrackerParent(xwl:n=e)"] = "Returns the parent entity of a 3d tracker object."
Data["egpTriangle(xwl:n,xv2,xv2,xv2)"] = "Creates a triangle object. Arguments are: Position nr 1, Position nr 2, Position nr 3."
Data["egpTriangleOutline(xwl:n,xv2,xv2,xv2)"] = "Creates an outlined triangle object. Arguments are: Position nr 1, Position nr 2, Position nr 3."
Data["egpUnParent(xwl:n)"] = " Remove the parenting of an object."
Data["egpVertices(xwl:n=xxv2*)"] = "Returns an array of the vertices of the object. Works on: Any object which does not have an X,Y position (ie polygon, line, triangle, etc) "
Data["egpWedge(xwl:n,xv2,xv2)"] = "Creates a wedge object. Arguments are: Position, Size. Wedge objects have a cake-piece-like mouth which you can change using egpSize."
Data["egpWedgeOutline(xwl:n,xv2,xv2)"] = "Creates an outlined wedge object. Arguments are: Position, Size. Wedge objects have a cake-piece-like mouth which you can change using egpSize."
Data["elevation(e:v=n)"] = "Returns the elevation between an entity and a target vector."
Data["elevation(p:v=n)"] = "Returns the elevation between a physics object and a target vector."
Data["elevation(v,a,v=n)"] = "Return the elevation between a vector facing an angle and a target vector."
Data["enableClip(h:n,b)"] = "Enables clip (number) on the hologram if (boolean) is true."
Data["enableGravity(e:b)"] = "Enable gravity on E."
Data["enableGravity(p:b)"] = "Enable gravity on physics object P."
Data["end(xrd:=v)"] = "Returns the end position of a ranger."
Data["endPos(xtr:v)"] = "Sets the end position of a trace."
Data["entity(n=e)"] = "Returns the entity associated with (number id)."
Data["entity(xrd:=e)"] = "Returns the hit entity of a ranger."
Data["entity(xsd:=e)"] = "Returns the attchment entity of a sound."
Data["entity(xtr:=e)"] = "Returns the hit entity of a trace."
Data["entityArray(...=xe*)"] = "Creates an array."
Data["entityArray(=xe*)"] = "Creates an array."
Data["exists(t:e=b)"] = "Returns true if (entity) exists in the table."
Data["exists(t:n=b)"] = "Returns true if (number) exists in the table."
Data["exists(t:s=b)"] = "Returns true if (string) exists in the table."
Data["exists(xa*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xc*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xe*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xh*:n=b)"] = ""
Data["exists(xn*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xq*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xs*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xt*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xv*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exists(xwl*:n=b)"] = ""
Data["exists(xxv2*:n=b)"] = "Returns true if the array has a value stored in the specified index."
Data["exit()"] = "Exits the currently executing thread."
Data["exp(n=n)"] = "Returns the constant e (2.71828) to the power of (number)."
Data["exp(q=q)"] = ""
Data["explode(s:s=xs*)"] = "Explodes a string into a table, each entry separated by (string)."
Data["eye(e:=v)"] = "Returns the direction entity's eyes are facing (entity must be a player)."
Data["eyeAngles(e:=a)"] = "Returns the angles of an entity's eyes (entity must be a player)."
Data["eyeTrace(e:=xtr)"] = "Returns a trace table using the entity's eye direction (entity must be a player)."

// F
Data["fade(xsd:n)"] = "Fades out the sound, (number) is the duration of fade."
Data["fade(xsd:n,n)"] = "Fades out the sound after (number 1) seconds, (number 2) is the duration of fade."
Data["fileAppend(s,s)"] = ""
Data["fileAppend(s,s,f)"] = ""
Data["fileList(s,f)"] = ""
Data["fileList(s,f,f)"] = ""
Data["fileLoad(s,f)"] = ""
Data["fileLoad(s,f,f)"] = ""
Data["fileWrite(s,s)"] = ""
Data["fileWrite(s,s,f)"] = ""
Data["filter(xrd:e)"] = "Filters an entity from a ranger."
Data["filter(xtr:e)"] = "Filters an entity from a trace."
Data["find(s:s,n=n)"] = "Returns he location of first instance of (string) in a string, starting at location (number)."
Data["find(s:s=n)"] = "Returns the location of first instance of (string) in a string."
Data["findByClass(s,v=xe*)"] = "Find entities with class type (string) and returns them in a table sorted by distance to V."
Data["findByClass(s=xe*)"] = "Find entities with class type (string) and returns them in a table."
Data["findByModel(s,s=xe*)"] = "Find entities with model (string) with a class filter and returns them in a table."
Data["findByModel(s=xe*)"] = "Find entities with model (string) and returns them in a table."
Data["findInBox(s,v,v=t)"] = "Find entities within box (vector min, vector max) with a class filter and returns them in a table."
Data["findInBox(v,v=xe*)"] = "Find entities within box (vector min, vector max) and returns them in a table."
Data["findInCone(s,v,v,n,a=t)"] = "Find entities in cone starting from (vector pos) in direction (vector dir) with length (number len) and width (number deg) and returns them in a table."
Data["findInCone(v,v,n,a=xe*)"] = "Find entities of (string class) in cone starting from (vector pos) in direction (vector dir) with length (number len) and width (number deg) and returns them in a table."
Data["findInSphere(s,v,n=t)"] = "Find entities of (string class) within sphere at (vector pos) with radius (number radius) and returns them in a table."
Data["findInSphere(v,n=xe*)"] = "Find entities within sphere at (vector pos) with radius (number radius) and returns them in a table."
Data["findPattern(s:s,n=n)"] = "Returns the 1st occurrence of the string S starting at N and going to the end of the string using REGEX functions, returns 0 if not found."
Data["findPattern(s:s=n)"] = "Returns the 1st occurrence of the string S using REGEX functions, returns 0 if not found."
Data["fire(xrd:)"] = "Generates the ranger data of the ranger."
Data["fire(xrd:v,v)"] = "Generates the ranger data of the ranger, using start and end position."
Data["fire(xrd:v,v,n)"] = "Generates the ranger data of the ranger, using start position, direction and distance."
Data["flashLight(e:=b)"] = "Returns true if the player has their flashlight toggled."
Data["flip(t:=t)"] = ""
Data["floor(a=a)"] = "Rounds components of (nagle PYR) down to nearest integer."
Data["floor(n=n)"] = "Rounds (number) down to nearest integer."
Data["floor(v=v)"] = "Rounds components of (vector XYZ) down to nearest integer."
Data["format(s:...=s)"] = "Formats a string (same as string.format in lua)."
Data["forward(a:=v)"] = "Returns the forward vector of an angle."
Data["forward(e:=v)"] = "Returns the forward vector of an entity."
Data["forward(p:=v)"] = "Returns the forward vector of a physics object."
Data["forward(q:=v)"] = "Returns the forward vector of a quaternion."
Data["frac(n=n)"] = "Returns the number to the right of the decimal (fractional component)."
Data["fraction(xrd:=n)"] = "This is a number between 0 and 1. Ex. 0.01 = 1/100 of your ranger's max range."
Data["fraction(xtr:=n)"] = "This is a number between 0 and 1. Ex. 0.01 = 1/100 of your tracer's max range."
Data["fractionLeftSolid(xrd:=n)"] = "If the ranger starts in a solid, this describes when the ranger leaves it as a fraction of the trace distance."
Data["fractionLeftSolid(xtr:=n)"] = "If the trace starts in a solid, this describes when the trace leaves it as a fraction of the trace distance."
Data["freeze(e:b)"] = "Set B to true to freeze an entity."
Data["freeze(p:b)"] = "Set B to true to freeze a physics object."
Data["fromUnit(s,n=n)"] = ""

// G
Data["gateName(=s)"] = "Returns the name of the executing lemongate."
Data["gateName(s)"] = "Sets the name of the executing lemongate."
Data["getAnimation(h:=n)"] = "Returns the current animation of a hologram."
Data["getAnimationName(h:n=s)"] = "Returns the name of the current animation of a hologram."
Data["getBoneAng(h:n=v)"] = "Gets the angle of bone N on hologram."
Data["getBonePos(h:n=v)"] = "Gets the position of bone N on hologram."
Data["getBoneScale(h:n=v)"] = "Gets the scale of bone N on hologram."
Data["getColor(e:=c)"] = "Returns the color RGBA of an entity."
Data["getColor(h:=c)"] = "Returns the color RGBA of hologram."
Data["getConstraints(e:=xe*)"] = "Returns a array of an entity's constraints."
Data["getCoroutine(=xcr)"] = "Returns the current coroutine or throws exception."
Data["getEquipped(e:=e)"] = "Returns the entity of the currently equipped weapon of the player."
Data["getHitState(xtr:=n)"] = "Returns the hitstate as a number."
Data["getID(h:=n)"] = "Returns the current ID of hologram H."
Data["getMaterial(e:=s)"] = "Returns the material of an entity."
Data["getMaterial(h:=s)"] = "Returns the material of a hologram."
Data["getParent(e:=e)"] = "Returns the parent entity of an entity."
Data["getParent(h:=e)"] = "Returns the parent entity of a hologram."
Data["getParentHolo(h:=h)"] = "Returns the parent hologram of a hologram."
Data["getPhysics(e:=p)"] = "Returns the physics object of an entity."
Data["getPhysicsCount(e:=n)"] = "Returns the number of physics objects of an entity."
Data["getPhysicsIndex(e:n=p)"] = "Returns a specific physics object, indicated by the number argument."
Data["getPitch(a:=n)"] = "Returns the pitch of the angle."
Data["getPlayers(=xe*)"] = "Returns a array of every player on the server."
Data["getPose(h:s=n)"] = "Gets the pose of a hologram."
Data["getPrivateTable(s=t)"] = "Returns the privatly shared table named S."
Data["getRoll(a:=n)"] = "Returns the roll of the angle"
Data["getSTable(s=t)"] = "Returns the shared table named S."
Data["getScale(h:=v)"] = "Returns the scale of a hologram."
Data["getScaleUnits(h:=v)"] = "Returns the scale of a hologram in units."
Data["getSkin(e:=n)"] = "Returns the current skin number of an entity."
Data["getSkin(h:=n)"] = "Returns the current skin number of hologram."
Data["getSkinCount(e:=n)"] = "Returns the amount of skins an entity has."
Data["getSkinCount(h:=n)"] = "Returns the amount of skins a hologram has."
Data["getTable(!:=t)"] = "Returns information table of exception."
Data["getYaw(a:=n)"] = "Returns the yaw of the angle"
Data["gmatch(s:s,n=xs*)"] = ""
Data["gmatch(s:s=xs*)"] = ""
Data["gravity(=n)"] = "Returns the gravity setting of the server."
Data["green(c:=n)"] = "Returns the green value of a color."

// H
Data["hardQuota(=n)"] = "Returns the size of the hard quota in microseconds"
Data["hasConstraints(e:=n)"] = "Returns the number of constraints entity has."
Data["hasInput(xwl:s=b)"] = "Returns true if the linked component has an input of the specified name."
Data["hasKinect(e:=b)"] = "Returns true if player (E) has a kinect."
Data["hasOutput(xwl:s=b)"] = "Returns true if the linked component has an output of the specified name."
Data["hasShading(h:=b)"] = "Returns true if a hologram has shading enabled."
Data["heading(e:v=a)"] = "Returns the heading between an entity and a target vector."
Data["heading(p:v=a)"] = "Returns the heading between a physics object and a target vector."
Data["heading(v,a,v=a)"] = "Return the heading between a vector facing an angle and a target vector."
Data["health(e:=n)"] = "Returns the current health of an entity."
Data["hit(xrd:=b)"] = "Returns true if the ranger hit anything."
Data["hit(xtr:=b)"] = "Returns true if trace hit anything."
Data["hitAll(xtr:)"] = "Trace Mask: All."
Data["hitAuxilory(xtr:b)"] = "Trace Mask: Auxiliary"
Data["hitBone(xtr:=n)"] = "Returns the ENUM of bone hit by trace. See wiki for list of ENUMs."
Data["hitBox(xrd:=n)"] = "Returns the ENUM of hitGroup the ranger hit. Alternative to hitGroup. See wiki for list of ENUMs."
Data["hitBox(xtr:=n)"] = "Returns the ENUM of hitGroup the trace hit. Alternative to hitGroup. See wiki for list of ENUMs."
Data["hitBoxbone(xrd:=n)"] = ""
Data["hitDebris(xtr:b)"] = "Trace Mask: Debris"
Data["hitDetail(xtr:b)"] = "Trace Mask: Detail props"
Data["hitGrate(xtr:b)"] = "Trace Mask: Grate"
Data["hitGroup(xrd:=n)"] = ""
Data["hitGroup(xtr:=n)"] = "Returns the ENUM of hitGroup the trace hit. Alternative to hitBox. See wiki for list of ENUMs."
Data["hitHitboxes(xtr:b)"] = "Trace Mask: "
Data["hitLadders(xtr:b)"] = "Trace Mask: Ladders"
Data["hitMaterial(xtr:=n)"] = "Returns the ENUM of material hit by trace. See wiki for list of ENUMs."
Data["hitMoveable(xtr:b)"] = "Trace Mask: "
Data["hitNPC(xtr:b)"] = "Trace Mask: NPC"
Data["hitNPCClip(xtr:b)"] = "Trace Mask: "
Data["hitNoDraw(xrd:=b)"] = "Returns true if the ranger hit a no-draw brush."
Data["hitNoDraw(xtr:=b)"] = "Returns true if the trace hit a no-draw brush."
Data["hitNonWorld(xtr:=b)"] = "Returns true if the trace hit a non-world surface (a prop, for example)."
Data["hitNoneWorld(xrd:=b)"] = "Returns true if the ranger hit a non-world surface (a prop, for example)."
Data["hitNormal(xrd:=v)"] = "Returns the normal of the surface that was hit by ranger."
Data["hitNormal(xtr:=v)"] = "Returns the normal of the surface that was hit by trace."
Data["hitOpaque(xtr:b)"] = "Trace Mask: "
Data["hitOrigin(xtr:b)"] = "Trace Mask: "
Data["hitPhysics(xrd:=n)"] = "Returns the index of the physics object (on the hit entity) hit by a ranger."
Data["hitPlayerClip(xtr:b)"] = "Trace Mask: "
Data["hitPortal(xtr:b)"] = "Trace Mask: "
Data["hitPos(xrd:=v)"] = "Returns the position that was hit by ranger."
Data["hitPos(xtr:=v)"] = "Returns the position that was hit by trace."
Data["hitSky(xrd:=b)"] = "Returns true if skybox was hit by ranger."
Data["hitSky(xtr:=b)"] = "Returns true if skybox was hit by trace."
Data["hitSlime(xtr:b)"] = "Trace Mask: Slime"
Data["hitSolid(xtr:b)"] = "Trace Mask: Solid"
Data["hitTexture(xrd:=s)"] = "Returns the texture of surface hit by ranger."
Data["hitTexture(xtr:=s)"] = "Returns the texture of surface hit by trace."
Data["hitTranslucent(xtr:b)"] = "Trace Mask: "
Data["hitWater(xrd:=b)"] = "Returns true if a ranger is allowed to hit the world."
Data["hitWater(xrd:b)"] = "Sets wether a ranger is allowed to hit water."
Data["hitWater(xtr:b)"] = "Trace Mask: Water"
Data["hitWindows(xtr:b)"] = "Trace Mask: "
Data["hitWorld(xrd:=b)"] = "Sets wether a ranger is allowed to hit the world."
Data["hitWorld(xtr:=b)"] = "Trace Mask: World."
Data["hologram(=h)"] = "Creates a hologram."
Data["hologram(n=h)"] = "Returns the hologram with the id set to N."
Data["hologram(s,v,a=h)"] = "Creates a hologram with (string model) at (vector position) with (angle rotation)."
Data["hologram(s,v=h)"] = "Creates a hologram with (string model) at (vector position)."
Data["hologram(s=h)"] = "Creates a hologram with (string model)."
Data["hologramAnyModel(=b)"] = "Returns true if holograms are allowed to use any model."
Data["hologramArray(...=xh*)"] = ""
Data["hologramArray(=xh*)"] = ""
Data["hologramClipLimit(=n)"] = "Returns the current clip limit per hologram."
Data["hologramLimit(=n)"] = "Returns the current hologram limit."
Data["hologramMaxScale(=n)"] = "Returns the current maxamum hologram scale."
Data["hologramSpawnRate(=n)"] = "Returns the burst rate for creating holograms."
Data["hostName(=s)"] = "Returns the host name of the server."
Data["hovertextFonts(=t)"] = ""
Data["hsv2rgb(c:=c)"] = "Converts a color from HSV to RGB space."
Data["hsv2rgb(n,n,n=c)"] = "Converts a color from HSV to RGB space."
Data["httpPostRequest(s,t,f,f)"] = "Makes a HTTP POST request to S with POST parameters T and calls F1 with Body[String] on success and F2 with no parameters on failure."
Data["httpRequest(s,f,f)"] = "Makes a HTTP GET request to S and calls F1 with Body[String] on success and F2 with no parameters on failure."

// I
Data["i(q:=n)"] = "Returns the I component of the quaternion."
Data["id(e:=n)"] = "Returns the entity index of E."
Data["ignoreEntities(xrd:=b)"] = "Returns true if the ranger is set to ignore all entitys."
Data["ignoreEntities(xrd:b)"] = "Sets a ranger to ingore all entitys."
Data["ignoreNoDraw(xtr:b)"] = "Trace Mask: No-Draw textures"
Data["ignoreWorld(xrd:=b)"] = "Returns true if the ranger is set to ignore world."
Data["ignoreWorld(xrd:b)"] = "Sets a ranger to ingore the world."
Data["inNoclip(e:=b)"] = "Returns true if the entity is no-clipped."
Data["include(s)"] = "includes a file with in scope."
Data["include(s,b)"] = "includes a file with new scope if boolean is true."
Data["index(s:n=s)"] = "Returns the Nth character of a string as a string."
Data["inertia(e:=v)"] = "Returns the inertia of an entity as a vector."
Data["inertia(p:=v)"] = "Returns the inertia of a physics object as a vector"
Data["inertiaA(e:=a)"] = "Returns the inertia of an entity as an angle."
Data["inputType(xwl:s=s)"] = "Returns the wiretype of an input on the linked component."
Data["inrange(a,a,a=b)"] = "Returns true if (angle value) is between (angle min) and (angle max)."
Data["inrange(n,n,n=n)"] = "Returns true if (number value) is between (number min) and (number max)."
Data["inrange(v,v,v=b)"] = "Returns true if (vector value) is between (vector min) and (vector max)."
Data["inrange(xv2,xv2,xv2=b)"] = "Returns true if (vector2 value) is between (vector2 min) and (vector2 max)."
Data["insert(t:!)"] = "Inserts (exception) to the bottom of a table."
Data["insert(t:?)"] = "Inserts (variant) to the bottom of a table."
Data["insert(t:a)"] = "Inserts (angle) to the bottom of a table."
Data["insert(t:b)"] = "Inserts (boolean) to the bottom of a table."
Data["insert(t:c)"] = "Inserts (color) to the bottom of a table."
Data["insert(t:e)"] = "Inserts (entity) to the bottom of a table."
Data["insert(t:f)"] = "Inserts (function) to the bottom of a table."
Data["insert(t:h)"] = "Inserts (hologram) to the bottom of a table."
Data["insert(t:n)"] = "Inserts (hologram) to the bottom of a table."
Data["insert(t:n,!)"] = "Inserts (exception) to entry (number) of a table."
Data["insert(t:n,?)"] = "Inserts (variant) to entry (number) of a table."
Data["insert(t:n,a)"] = "Inserts (angle) to entry (number) of a table."
Data["insert(t:n,b)"] = "Inserts (boolean to entry (number) of a table."
Data["insert(t:n,c)"] = "Inserts (color) to entry (number) of a table."
Data["insert(t:n,e)"] = "Inserts (entity) to entry (number) of a table."
Data["insert(t:n,f)"] = "Inserts (function) to entry (number) of a table."
Data["insert(t:n,h)"] = "Inserts (hologram) to entry (number) of a table."
Data["insert(t:n,n)"] = "Inserts (number value) to entry (number) of a table."
Data["insert(t:n,p)"] = "Inserts (buffer) to entry (number) of a table."
Data["insert(t:n,q)"] = "Inserts (quaternion) to entry (number) of a table."
Data["insert(t:n,s)"] = "Inserts (string) to entry (number) of a table."
Data["insert(t:n,t)"] = "Inserts (table) to entry (number) of a table."
Data["insert(t:n,v)"] = "Inserts (vector) to entry (number) of a table."
Data["insert(t:n,xbf)"] = "Inserts (buffer) to the bottom of a table."
Data["insert(t:n,xcr)"] = "Inserts (coroutine) to entry (number) of a table."
Data["insert(t:n,xrd)"] = "Inserts (ranger) to entry (number) of a table."
Data["insert(t:n,xsd)"] = "Inserts (sound) to entry (number) of a table."
Data["insert(t:n,xtr)"] = "Inserts (trace) to entry (number) of a table."
Data["insert(t:n,xv2)"] = "Inserts (vector2) to entry (number) of a table."
Data["insert(t:n,xwl)"] = "Inserts (wirelink) to entry (number) of a table."
Data["insert(t:p)"] = "Inserts (physics object) to the bottom of a table."
Data["insert(t:q)"] = "Inserts (quaternion) to the bottom of a table."
Data["insert(t:s)"] = "Inserts (string) to the bottom of a table."
Data["insert(t:t)"] = "Inserts (table) to the bottom of a table."
Data["insert(t:v)"] = "Inserts (vector) to the bottom of a table."
Data["insert(t:xbf)"] = "Inserts (buffer) to the bottom of a table."
Data["insert(t:xcr)"] = "Inserts (coroutine) to the bottom of a table."
Data["insert(t:xrd)"] = "Inserts (ranger) to the bottom of a table."
Data["insert(t:xsd)"] = "Inserts (sound) to the bottom of a table."
Data["insert(t:xtr)"] = "Inserts (trace) to the bottom of a table."
Data["insert(t:xv2)"] = "Inserts (vector2) to the bottom of a table."
Data["insert(t:xwl)"] = "Inserts (wirelink to the bottom of a table."
Data["insert(xa*:a)"] = ""
Data["insert(xa*:n,a)"] = ""
Data["insert(xc*:c)"] = ""
Data["insert(xc*:n,c)"] = ""
Data["insert(xe*:e)"] = ""
Data["insert(xe*:n,e)"] = ""
Data["insert(xh*:h)"] = ""
Data["insert(xh*:n,h)"] = ""
Data["insert(xn*:n)"] = ""
Data["insert(xn*:n,n)"] = ""
Data["insert(xq*:n,q)"] = ""
Data["insert(xq*:q)"] = ""
Data["insert(xs*:n,s)"] = ""
Data["insert(xs*:s)"] = ""
Data["insert(xt*:n,t)"] = ""
Data["insert(xt*:t)"] = ""
Data["insert(xv*:n,v)"] = ""
Data["insert(xv*:v)"] = ""
Data["insert(xwl*:n,xwl)"] = ""
Data["insert(xwl*:xwl)"] = ""
Data["insert(xxv2*:n,xv2)"] = ""
Data["insert(xxv2*:xv2)"] = ""
Data["int(n=n)"] = "Returns the number to the left of the decimal (integer component)."
Data["intersectRayWithOBB(v,v,v,a,v,v=v)"] = "Performs a ray box intersection and returns position, (vector RayS tart, vector Ray Direction, vector Box Origin, angle BoxAngles, vector BoxMin, vector BoxMax)."
Data["intersectRayWithPlane(v,v,v,v=v)"] = "Performs a ray plane intersection and returns the hit position, (vector Ray Origin, vector Ray Direction, vector Plane Position, vector Plane Normal)."
Data["inv(q=q)"] = "Returns the inverse of a quaternion."
Data["invert(t:=t)"] = "Inverts a table and returns it as a new table."
Data["isAdmin(e:=b)"] = "Returns true if the entity is an admin (entity must be a player)."
Data["isBlocked(h:e=b)"] = "Returns true is a player is blocked from seeing the hologram."
Data["isConstrained(e:=b)"] = "Returns true if entity has any constraints."
Data["isDedicated(=b)"] = "Returns true if game is on a dedicated server."
Data["isFrozen(e:=b)"] = "Returns true if the entity is frozen."
Data["isFrozen(p:=b)"] = "Returns true if the physics object is frozen."
Data["isHiSpeed(xwl:=b)"] = "Returns true if the wirelinked object supports the HiSpeed interface. See wiremod wiki for more information."
Data["isNPC(e:=b)"] = "Returns true if entity is an NPC."
Data["isOnFire(e:=b)"] = "Returns true if entity is on fire."
Data["isOnGround(e:=b)"] = "Returns true if entity is on the ground (entity must be a player)."
Data["isPlayer(e:=b)"] = "Returns true if entity is a player."
Data["isPlayerHolding(e:=b)"] = "Returns true if entity is being held by a player."
Data["isPlaying(xsd:=b)"] = "Returns true if the sound is currently playing."
Data["isSinglePlayer(=b)"] = "Returns true if game is in single player."
Data["isSuperAdmin(e:=b)"] = "Returns true if entity is a super admin (entity must be a player)."
Data["isUnderWater(e:=b)"] = "Returns true if entity is under water."
Data["isValid(e:=b)"] = "Returns true if entity is a valid entity."
Data["isVehicle(e:=b)"] = "Returns true if entity is a vehicle."
Data["isVisible(h:=b)"] = "Returns true of the hologram is visible."
Data["isWeapon(e:=b)"] = "Returns true if entity is a weapon."
Data["isWeldedTo(e:=e)"] = "Returns the entity (entity) is welded to."
Data["isWorld(e:=b)"] = "Returns true if entity is the world."

// J
Data["j(q:=n)"] = "Returns the J component of a quaternion."
Data["jiggleBone(h:n,b)"] = "Makes the bone N on the hologram jiggle about when B is true."

// K
Data["k(q:=n)"] = "Returns the K component of a quaternion."
Data["keyBack(e:=b)"] = "Returns true if player E is pressing IN_BACK."
Data["keyDuck(e:=b)"] = "Returns true if player E is pressing IN_DUCK."
Data["keyForward(e:=b)"] = "Returns true if player E is pressing IN_FORWARD."
Data["keyJump(e:=b)"] = "Returns true if player E is pressing IN_JUMP."
Data["keyLeft(e:=b)"] = "Returns true if player E is pressing IN_MOVELEFT."
Data["keyLeftTurn(e:=b)"] = "Returns true if player E is pressing IN_LEFT."
Data["keyRight(e:=b)"] = "Returns true if player E is pressing IN_MOVERIGHT."
Data["keyRightTurn(e:=b)"] = "Returns true if player E is pressing IN_RIGHT."
Data["keySprint(e:=b)"] = "Returns true if player E is pressing IN_SPEED."
Data["keyUse(e:=b)"] = "Returns true if player E is pressing IN_USE."
Data["keyWalk(e:=b)"] = "Returns true if player E is pressing IN_WALK."
Data["keyZoom(e:=b)"] = "Returns true if player E is pressing IN_ZOOM."
Data["keys(t:=t)"] = "Returns a table containing the key of the table."
Data["kinectActive(e:=b)"] = "Returns true if player's (E) kinect is active."
Data["kinectHead(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectHip(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftAnkle(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftElbow(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftFoot(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHand(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHip(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftKnee(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftShoulder(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftWrist(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightAnkle(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightElbow(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightFoot(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHand(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHip(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightKnee(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightShoulder(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectRightWrist(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectShoulder(e:=v)"] = "Gets a position from the players motion sensor."
Data["kinectSpine(e:=v)"] = "Gets a position from the players motion sensor."

// L
Data["last(xa*:=a)"] = "Returns the value on the highest index of the array. "
Data["last(xc*:=c)"] = "Returns the value on the highest index of the array. "
Data["last(xe*:=e)"] = "Returns the value on the highest index of the array. "
Data["last(xh*:=h)"] = ""
Data["last(xn*:=n)"] = "Returns the value on the highest index of the array. "
Data["last(xq*:=q)"] = "Returns the value on the highest index of the array. "
Data["last(xs*:=s)"] = "Returns the value on the highest index of the array. "
Data["last(xt*:=t)"] = "Returns the value on the highest index of the array. "
Data["last(xv*:=v)"] = "Returns the value on the highest index of the array. "
Data["last(xwl*:=xwl)"] = ""
Data["last(xxv2*:=xv2)"] = "Returns the value on the highest index of the array. "
Data["left(s:n=s)"] = "Returns the next N characters starting with the leftmost character."
Data["leftClick(e:=b)"] = "Returns true if entity clicked the left mouse button (entity must be a player)."
Data["length(s:=n)"] = "Returns the length of a string"
Data["length(v:=n)"] = "Returns the length of a vector."
Data["length(xv2:=n)"] = "Returns the length of a vector."
Data["length2(v:=n)"] = "Returns the squared length of a vector."
Data["level(xsd:=n)"] = "Returns the level of a sound in decibels."
Data["level(xsd:n)"] = "Sets the level of a sound in decibels."
Data["ln(n=n)"] = "Returns the logarithm of (number) to base e."
Data["log(n,n=n)"] = "Returns the logarithm of (number1 value) to (number2 base)."
Data["log(q=q)"] = "Returns the logarithm of a quaternion to base e."
Data["log10(n=n)"] = "Returns the logarithm of (number) to base 10."
Data["log2(n=n)"] = "Returns the logarithm of (number) to base 2."
Data["lookupAttachment(e:s=n)"] = ""
Data["lower(s:=s)"] = "Returns a lower-cased (string)."

// M
Data["map(=s)"] = "Returns the name of the map."
Data["mass(e:=n)"] = "Returns the mass of an entity."
Data["mass(p:=n)"] = "Returns the mass of a physics object."
Data["massCenter(e:=v)"] = "Returns the mass center of an entity as a local vector."
Data["massCenter(p:=v)"] = "Returns the mass center of a physics object."
Data["massCenterL(p:=v)"] = "Returns the mass center of a physics object as a local vector."
Data["massCenterWorld(e:=v)"] = "Returns the mass center of an entity as a world vector."
Data["massCenterWorld(p:=v)"] = "Returns the mass center of a physics object as a world vector."
Data["matchFirst(s:s,n=s)"] = "Returns a string match to (string) starting at the leftmost character starting at location (number)."
Data["matchFirst(s:s=s)"] = "Returns a string match to (string) starting at the leftmost character."
Data["matchPattern(s:s,n=xs*)"] = "Matches a string and returns a array of the sub-captures starting at (number)."
Data["matchPattern(s:s=xs*)"] = "Matches a string and returns a array of the sub-captures."
Data["materialType(xrd:=n)"] = "Returns the type of material hit by the ranger."
Data["max(n,n,n,n,n=n)"] = "Returns the number with the highest value."
Data["max(n,n,n,n=n)"] = "Returns the number with the highest value."
Data["max(n,n,n=n)"] = "Returns the number with the highest value."
Data["max(n,n=n)"] = "Returns the number with the highest value."
Data["maxFrictionMass(=n)"] = ""
Data["maxIndex(t:=?)"] = "Returns the index (as variant) of the highest value on the table."
Data["maxPlayers(=n)"] = "Returns the player limit of the current server."
Data["maxs(xrd:=v)"] = "Returns the box max of a trace."
Data["merge(t:t)"] = "Merges 2 tables into 1."
Data["message(!:=s)"] = "Returns the current exceptions message."
Data["min(n,n,n,n,n=n)"] = "Returns the number with the lowest value."
Data["min(n,n,n,n=n)"] = "Returns number with the lowest value."
Data["min(n,n,n=n)"] = "Returns the number with the lowest value."
Data["min(n,n=n)"] = "Returns the number with the lowest value."
Data["minFrictionMass(=n)"] = ""
Data["minIndex(t:=?)"] = "Returns the index (as variant) of the lowest value on the table."
Data["mins(xrd:=v)"] = "Returns the box min of a trace."
Data["mix(a,a,n=a)"] = "Returns a linear interpolation between two angles."
Data["mix(n,n,n=n)"] = "Returns a linear interpolation between two numbers."
Data["mix(v,v,n=v)"] = "Returns a linear interpolation between two vectors."
Data["mix(xv2,xv2,n=xv2)"] = "Returns a linear interpolation between two vectors."
Data["model(e:=s)"] = "Returns the model path of an entity."
Data["moveTo(h:v,n)"] = "Animates the hologram to move to V, N is speed."

// N
Data["name(e:=s)"] = "Returns the name of an entity."
Data["noHull(xrd:)"] = "Removes the box min and max from the trace."
Data["noSpawnEffect(b)"] = "Makes propcore use an effect when spawning props."
Data["normal(xrd:=v)"] = "Returns a normalized vector representing the direction of the ranger from start to finish."
Data["normal(xtr:=v)"] = "Returns a normalized vector representing the direction of the trace from start to finish."
Data["normalized(v:=v)"] = "Returns a normalized vector."
Data["normalized(xv2:=xv2)"] = "Returns a normalized vector."
Data["numPlayers(=n)"] = "Returns the ammount of currently connected players."
Data["numberArray(...=xn*)"] = "Creates an array."
Data["numberArray(=xn*)"] = "Creates an array."

// O
Data["outputType(xwl:s=s)"] = "Returns the wiretype of an output on the linked component."
Data["owner(=e)"] = "Returns the owner of the executing lemongate."
Data["owner(e:=e)"] = "Returns the owner of an entity."

// P
Data["p(a:=n)"] = "Returns the pitch component of an angle (replaced with getPitch)."
Data["parent(e:e)"] = "Sets the parent entity of E."
Data["parent(e:p)"] = "Sets the parent physics object of E."
Data["parent(h:e)"] = "Sets the parent entity of a hologram."
Data["parent(h:h)"] = "Sets the parent hologram of a hologram."
Data["parent(h:p)"] = "Sets the parent physics object of a hologram."
Data["passenger(e:=e)"] = "Returns the passenger of an entity (entity must be a vehicle)."
Data["path(xsd:=s)"] = "Returns the path of a sound."
Data["pi(=n)"] = "Returns pi (approximately 3.1415926535898)."
Data["ping(e:=n)"] = "Returns the ping of an entity (entity must be a player)."
Data["pitch(xsd:=n)"] = "Returns the pitch of a sound."
Data["pitch(xsd:n)"] = "Sets the pitch of a sound."
Data["play(xsd:)"] = "Starts playing  a sound."
Data["play(xsd:n)"] = "Starts playing a sound, for (number) duration."
Data["playerByName(s,b=e)"] = "Finds a player by part name, will use an exact match when B is true."
Data["playerID(e:=n)"] = "Returns a players ID."
Data["playersInTeam(n=n)"] = "Returns the current players in team N"
Data["pop(t:=?)"] = "Pops a value of the table and returns it as variant."
Data["pos(e:=v)"] = "Returns the global position of an entity."
Data["pos(p:=v)"] = "Returns the global position of an entity."
Data["print(...)"] = "Prints the contents of ( ... ) to chat seperated with a space."
Data["printTable(t)"] = "prints the contents of a table."
Data["propGravity(=v)"] = "Returns the gravity of the server as a vector."
Data["propcore(=t)"] = "Returns a table of the current propcore settings."
Data["push(t:!)"] = "Pushes an exception onto a table."
Data["push(t:?)"] = "Pushes a variant (as native type) onto a table."
Data["push(t:a)"] = "Pushes an angle onto a table."
Data["push(t:b)"] = "Pushes an boolean onto a table."
Data["push(t:c)"] = "Pushes an color onto a table."
Data["push(t:e)"] = "Pushes an entity onto a table."
Data["push(t:f)"] = "Pushes a function onto a table."
Data["push(t:h)"] = "Pushes a hologram onto a table."
Data["push(t:n)"] = "Pushes a number onto a table."
Data["push(t:p)"] = "Pushes a physics object onto a table."
Data["push(t:q)"] = "Pushes a quaternion onto a table."
Data["push(t:s)"] = "Pushes a string onto a table."
Data["push(t:t)"] = "Pushes a table onto a table."
Data["push(t:v)"] = "Pushes a vector onto a table."
Data["push(t:xbf)"] = "Pushes a buffer onto a table."
Data["push(t:xcr)"] = "Pushes a coroutine onto a table."
Data["push(t:xrd)"] = "Pushes a ranger onto a table."
Data["push(t:xsd)"] = "Pushes a sound onto a table."
Data["push(t:xtr)"] = "Pushes a trace onto a table."
Data["push(t:xv2)"] = "Pushes a 2d vector onto a table."
Data["push(t:xwl)"] = "Pushes a wirelink onto a table."
Data["pushClip(h:n,v,v)"] = "Clip a hologram, (number clip index) at (vector position) across (vector axis)."

// Q
Data["qMod(q=q)"] = "Returns the modulus of a quaternion."
Data["qRotation(v,n=q)"] = "Returns a quaternion from a vector, number controls the angle."
Data["qRotation(v=q)"] = "Returns a quaternion from a vector, vector components control axis and angle."
Data["qi(=q)"] = "Returns a quaternion with an I component of 1."
Data["qi(n=q)"] = "Returns a quaternion with an I component of (number)."
Data["qj(=q)"] = "Returns a quaternion with an J component of 1."
Data["qj(n=q)"] = "Returns a quaternion with an J component of (number)."
Data["qk(=q)"] = "Returns a quaternion with an K component of 1."
Data["qk(n=q)"] = "Returns a quaternion with an K component of (number)."
Data["quat(=q)"] = "Returns an empty quaternion."
Data["quat(a=q)"] = "Converts (angle) to a quaternion."
Data["quat(e=q)"] = "Converts the angles of (entity) to a quaternion."
Data["quat(n,n,n,n=q)"] = "Creates a quaternion nR nI nJ nK."
Data["quat(n=q)"] = "Creates a quaternion with an R component of (number)."
Data["quat(v,v=q)"] = "Creates a quaternion using (vector forward) and (vector up)."
Data["quat(v=q)"] = "Converts (vector) to a quaternion."
Data["quaternionArray(...=xq*)"] = "Creates an array."
Data["quaternionArray(=xq*)"] = "Creates an array."

// R
Data["r(a:=n)"] = "Returns the roll component of an angle (replaced with getRoll)."
Data["radius(e:=n)"] = "Returns the radius of an entity."
Data["randAng(n,n=a)"] = ""
Data["randVec(n,n=v)"] = ""
Data["random(=n)"] = "Returns a random floating point number between 0 and 1."
Data["random(n,n=n)"] = "Returns a random floating-point number between the specified interval."
Data["random(n=n)"] = "Returns a random floating point number between 0 and (number max)."
Data["ranger(=xrd)"] = "Creates a new ranger object."
Data["read(xbf:=?)"] = ""
Data["readAngle(xbf:=a)"] = "Reads an angle from a buffer."
Data["readArray(xwl:n,n=t)"] = "Reads a table from a high speed wirelink."
Data["readBool(xbf:=b)"] = "Reads a boolean of a buffer."
Data["readCell(xwl:n=n)"] = "Reads from high speed memory on the linked component."
Data["readEntity(xbf:=e)"] = "Reads an entity from a buffer."
Data["readNumber(xbf:=n)"] = "Reads a number from a buffer."
Data["readPos(xbf:=n)"] = "Returns the current read position of the buffer."
Data["readString(xbf:=s)"] = "Reads a string from the buffer."
Data["readString(xwl:n=s)"] = "Reads a string from a high speed wirelink."
Data["readVector(xbf:=v)"] = "Reads a vector of a buffer."
Data["real(q:=n)"] = "Returns the R component of a quaternion."
Data["realtime(=n)"] = "Returns the real time."
Data["red(c:=n)"] = "Returns the red value of a color."
Data["remove(e:)"] = "Removes entity E."
Data["remove(h:)"] = "Removes the hologram."
Data["remove(t:e=?)"] = "Removes value at index E of table, the removed object is returned as variant."
Data["remove(t:n=?)"] = "Removes value at index N of table, the removed object is returned as variant."
Data["remove(t:s=?)"] = "Removes value at index S of table, the removed object is returned as variant."
Data["remove(xa*:n=a)"] = ""
Data["remove(xc*:n=c)"] = ""
Data["remove(xe*:n)"] = "Removes the value at index on the array and returns it."
Data["remove(xh*:n)"] = ""
Data["remove(xn*:n=n)"] = ""
Data["remove(xq*:n)"] = "Removes the value at index on the array and returns it."
Data["remove(xs*:n=s)"] = ""
Data["remove(xt*:n)"] = "Removes the value at index on the array and returns it."
Data["remove(xv*:n=v)"] = ""
Data["remove(xwl*:n)"] = ""
Data["remove(xxv2*:n=xv2)"] = ""
Data["removeMetaTable(t)"] = ""
Data["removeSTable(s)"] = "Removed the shared table named S."
Data["removeText(e:)"] = "e:removeText()"
Data["removeTrail(e:)"] = "Removes the trail of the entity."
Data["repeat(s:n=s)"] = "Returns a string of (string) repeated (number) times."
Data["replace(s:s,s=s)"] = "Finds and replaces every occurrence of the first argument with the second argument."
Data["replacePattern(s:s,s=s)"] = "Finds and replaces every occurrence of the first argument using REGEX with the second argument."
Data["requestKeys(e:b=b)"] = "Request key events for players E, requires 'lemon_share_keys 1'."
Data["restart(xsd:)"] = "Stops and then starts a sound."
Data["resume(xcr:...=b)"] = "Resumes/starts a coroutine, with a vararg to pass to the function."
Data["resume(xcr:=b)"] = "Resumes/starts a coroutine."
Data["rgb2digi(c:=n)"] = ""
Data["rgb2digi(n,n,n=n)"] = ""
Data["rgb2hsv(c:=c)"] = "Converts a color from RGB to HSV space."
Data["rgb2hsv(n,n,n=c)"] = "Converts a color from RGB to HSV space."
Data["right(a:=v)"] = "Returns the right vector of an angle."
Data["right(e:=v)"] = "Returns the right vector of an entity."
Data["right(p:=v)"] = "Returns the right vector of a physics object."
Data["right(q:=v)"] = "Returns the right vector of a quaternion."
Data["right(s:n=s)"] = "Returns (number) amount of characters starting with the rightmost character."
Data["rightClick(e:=b)"] = "Returns true if entity clicked the right mouse button (entity must be a player)."
Data["root(n,n=n)"] = "Returns the root of (number base) and (number power)."
Data["rotate(v:a=v)"] = "Rotate a vector by an angle)."
Data["rotateAroundAxis(a:v,n=a)"] = "Rotates an angle around (vector axis) by (number degrees)."
Data["rotateTo(h:a,n)"] = "Animates a hologram to move to rotation A, N is speed."
Data["rotationAngle(q=n)"] = ""
Data["rotationAxis(q=v)"] = ""
Data["rotationVector(q=v)"] = "Returns the rotation vector of a quaternion."
Data["round(a,n=a)"] = "Round angle PYR components to (number)'s decimal precision."
Data["round(a=a)"] = "Rounds angle PYR components to the nearest integer."
Data["round(n,n=n)"] = "Round a number to (number)'s decimal precision."
Data["round(n=n)"] = "Round a number to the nearest integer."
Data["round(v,n=v)"] = "Round vector XYZ components to (number)'s decimal precision."
Data["round(v=v)"] = "Round vector XYZ components to nearest integer."

// S
Data["scaleTo(h:v,n)"] = "Animates a hologram to rescale to size V, N is speed."
Data["scaleToUnits(h:v,n)"] = "Animates a hologram to rescale to size V in units, N is speed."
Data["sec(n=n)"] = "Returns the secant of (number degrees)."
Data["sech(n=n)"] = "Returns the hyperbolic secant of (number degrees)."
Data["sechr(n=n)"] = "Returns the secant of (number radians."
Data["secr(n=n)"] = "Returns the hyperbolic secant of (number radians)."
Data["self(=e)"] = "Returns the entity of the executing lemongate."
Data["selfDestruct()"] = "Removes the LemonGate."
Data["send(xbf:s,e)"] = "Sends a buffer to E (using the receiveBuffer event) using S as message name."
Data["sendAll(xbf:s)"] = "Sends a buffer to all lemon-gates (using the receiveBuffer event) using S as message name."
Data["sendAllPrivate(xbf:s)"] = "Sends a buffer to all lemon-gates owned by the same owner (using the receiveBuffer event) using S as message name."
Data["set(v:n,n,n)"] = "Sets the x, y, z of a vector."
Data["set(xv2:n,n)"] = "Sets the x, y of a 2d vector."
Data["setAlpha(c:n=c)"] = "Sets the alpha value of a color."
Data["setAng(e:a)"] = "Sets the angle of an entity."
Data["setAng(h:a)"] = "Sets the angle of a hologram."
Data["setAnimation(h:n)"] = "Sets the animation of a hologram."
Data["setAnimation(h:n,n)"] = "Sets the animation of a hologram."
Data["setAnimation(h:n,n,n)"] = "Sets the animation of a hologram."
Data["setAnimation(h:s)"] = "Sets the animation of a hologram."
Data["setAnimation(h:s,n)"] = "Sets the animation of a hologram."
Data["setAnimation(h:s,n,n)"] = "Sets the animation of a hologram."
Data["setAnimationRate(h:n)"] = "Sets the animation rate of a hologram."
Data["setBlue(c:n=c)"] = "Sets the blue value of a color."
Data["setBodygroup(e:n,n)"] = "Sets the bodygroup of an entity (number groupID) (number subID)."
Data["setBodygroup(h:n,n)"] = "Sets the bodygroup of a hologram (number groupID) (number subID)."
Data["setBoneAngle(h:n,a)"] = "Sets the angle of bone N on the hologram."
Data["setBonePos(h:n,v)"] = "Sets the position of bone N on the hologram."
Data["setBoneScale(h:n,v)"] = "Sets the scale of bone N on the hologram."
Data["setClipNormal(h:n,v)"] = "Set the normal of clip N on hologram."
Data["setClipOrigin(h:n,v)"] = "Set the origin of clip N on hologram."
Data["setColor(e:c)"] = "Sets the color of an entity."
Data["setColor(h:c)"] = "Sets the color of a hologram."
Data["setGreen(c:n=c)"] = "Sets the green value of a color."
Data["setHitState(xtr:n)"] = "Sets a traces hit state."
Data["setHull(xrd:v,v)"] = "Sets the mix and max hull size of a ranger."
Data["setID(h:n)"] = "Sets the id of a hologram for use with hologram(N), the ID is specific to the LemonGate."
Data["setMass(e:n)"] = "Sets the mass of an entity."
Data["setMass(p:n)"] = "Sets the mass of a physics object."
Data["setMaterial(e:s)"] = "Sets the material of an entity."
Data["setMaterial(h:s)"] = "Sets the material of a hologram."
Data["setMetaTable(t,t=t)"] = "Sets the metatable used by the T1 to T2 and returns T1."
Data["setModel(h:s)"] = "Sets the model of a hologram."
Data["setNotSolid(e:b)"] = "Changes the solidity of an entity."
Data["setPhysProp(e:s,b)"] = ""
Data["setPitch(a:n=a)"] = "Sets the pitch component of an angle."
Data["setPos(e:v)"] = "Sets the position of an entity."
Data["setPos(h:v)"] = "Sets the position of a hologram."
Data["setPose(h:s,n)"] = "Sets the pose of a hologram."
Data["setPrivateTable(s,t)"] = "Sets a table to be privatly shared under the name S."
Data["setRed(c:n=c)"] = "Sets the red value of a color."
Data["setRoll(a:n=a)"] = "Sets the roll component of an angle."
Data["setSTable(s,t)"] = "Sets a table to be shared under the name S."
Data["setScale(h:v)"] = "Sets the scale of a hologram."
Data["setScaleUnits(h:v)"] = "Sets the scale of a hologram in units."
Data["setSkin(e:n)"] = "Sets the skin of an entity."
Data["setSkin(h:n)"] = "Sets the skin of a hologram."
Data["setText(e:s)"] = "e:setText(Text)"
Data["setText(e:s,c)"] = "e:setText(Text, Color)"
Data["setText(e:s,c,v)"] = "e:setText(Text, Color, Offset)"
Data["setText(e:s,c,v,n)"] = "e:setText(Text, Color, Offset, Range)"
Data["setText(e:s,s)"] = "e:setText(Text, Font)"
Data["setText(e:s,s,c)"] = "e:setText(Text, Font, Color)"
Data["setText(e:s,s,c,v)"] = "e:setText(Text, Font, Color, Offset)"
Data["setText(e:s,s,c,v,n)"] = "e:setText(Text, Font, Color, Offset, Range)"
Data["setTextColor(e:c)"] = "e:setTextColor(Color)"
Data["setTextFilter(e:t)"] = "e:setTextRange(Filter)"
Data["setTextFont(e:s)"] = "e:setTextFont(Font)"
Data["setTextOffset(e:v)"] = "e:setTextOffset(Offset)"
Data["setTextRange(e:n)"] = "e:setTextRange(Range)"
Data["setTrail(e:n,n,n,s,c)"] = ""
Data["setTrail(e:n,n,n,s,c,n,b)"] = ""
Data["setX(v:n)"] = "Sets the X of a vector"
Data["setX(xv2:n)"] = "Sets the X of a vector"
Data["setY(v:n)"] = "Sets the Y of a vector"
Data["setY(xv2:n)"] = "Sets the Y of a vector"
Data["setYaw(a:n=a)"] = "Sets the yaw component of an angle."
Data["setZ(v:n)"] = "Sets the Z of a vector"
Data["shading(h:b)"] = "Enables or disables shading of a hologram."
Data["shadow(h:b)"] = "Set to true to make a hologram cast a shadow."
Data["shift(t:=?)"] = ""
Data["shift(t:n=?)"] = ""
Data["shiftL(a=a)"] = "Shift angle PYR components to the left."
Data["shiftL(v=v)"] = "Shift vector XYZ components to the left."
Data["shiftR(a=a)"] = "Shift angle PYR components to the right."
Data["shiftR(v=v)"] = "Shift vector XYZ components to the right."
Data["shootPos(e:=v)"] = "Returns the shoot position of an entity (entity must be a player)."
Data["sign(n=n)"] = "Returns the sign of (number)."
Data["sin(n=n)"] = "Returns the sine of (number degrees)."
Data["sinh(n=n)"] = "Returns the hyperbolic sine of (number degrees)."
Data["sinhr(n=n)"] = "Returns the hyperbolic sine of (number radians)."
Data["sinr(n=n)"] = "Returns the sine of (number radians)."
Data["size(t:=n)"] = "Returns the amount of entries in a table."
Data["skip(xbf:)"] = "Skip the next object on buffer."
Data["sleep(n)"] = "Pauses the current coroutine for N seconds."
Data["slerp(q,q,n=q)"] = "Interpolates between two quaternions by a ratio of the given number."
Data["softQuota(=n)"] = "Returns the size of the soft quota in microseconds"
Data["sort(t:f=t)"] = ""
Data["sound(e,s,n=xsd)"] = "Creates a sound object attached to an entity, where (string) is sound path and (number) is duration."
Data["sound(e,s=xsd)"] = "Creates a sound object attached to an entity, where (string) is sound path."
Data["sound(h,s,n=xsd)"] = ""
Data["sound(h,s=xsd)"] = ""
Data["sound(s,n=xsd)"] = "Creates a sound object, where (string) is sound path and (number) is duration."
Data["sound(s=xsd)"] = "Creates a sound object, where (string) is sound path."
Data["sounds(=t)"] = "Returns at table of all the sound objects owned the gate."
Data["spawn(s,b=e)"] = "Creates and returns a new prop using S as its model, it will be frozen if B is true."
Data["spawn(s=e)"] = "Creates and returns a new prop using S as its model."
Data["spawnedProps(=t)"] = "Returns a table of props created by the LemonGate."
Data["speedLimit(=n)"] = ""
Data["sqrt(n=n)"] = "Returns the square root of (number)."
Data["start(xrd:=v)"] = "Sets the start position of a ranger."
Data["startKinect(e:)"] = "Activates a players motion sensor."
Data["startPos(xtr:v)"] = "Sets the start position of a trace."
Data["startSolid(xrd:=b)"] = "Untits before trace exited a solid object."
Data["startSolid(xtr:=b)"] = "Untits before trace exited a solid object."
Data["status(xcr:=s)"] = "Returns the status of a coroutine."
Data["steamID(e:=s)"] = "Returns the steamID of an entity (entity must be a player)."
Data["stop(xsd:)"] = "Stops a sound."
Data["stopMove(h:)"] = "Stops the movment animation of a hologram."
Data["stopRotate(h:)"] = "Stops the rotation animation of a hologram."
Data["stopScale(h:)"] = "Stops the rescale animation of a hologram."
Data["stringArray(...=xs*)"] = "Creates an array."
Data["stringArray(=xs*)"] = "Creates an array."
Data["sub(s:n,n=s)"] = "Returns a substring starting at location (number1 start) and ending at (number2 end)."
Data["sub(s:n=s)"] = "Returns a substring starting at location (number)"
Data["sysTime(=n)"] = "Returns the current system time of the server."

// T
Data["tableArray(...=xt*)"] = "Creates an array."
Data["tableArray(=xt*)"] = "Creates an array."
Data["tan(n=n)"] = "Returns the tangent of (number degrees)."
Data["tanh(n=n)"] = "Returns the hyperbolic tangent of (number degrees)."
Data["tanhr(n=n)"] = "Returns the tangent of (number radians)."
Data["tanr(n=n)"] = "Returns the hyperbolic tangent of (number radians)."
Data["team(e:=n)"] = "Returns the team of player E."
Data["teamColor(n=c)"] = "Returns the colour of team N."
Data["teamDeaths(n=n)"] = "Gets the deaths of team N."
Data["teamFrags(n=n)"] = "Gets the frags of team N."
Data["teamName(n=s)"] = "Gets the name of team N."
Data["teamScore(n=n)"] = "Gets the score of team N."
Data["teams(=xn*)"] = "Returns all the team ids."
Data["throw(s)"] = "Throws a user exception with a message."
Data["throw(s,t)"] = "Throws a user exception with a message with a table."
Data["tickQuota(=n)"] = "Returns the size of the tick quota in microseconds."
Data["time(s=n)"] = "Returns the current time is unit S."
Data["timeConnected(e:=n)"] = "Returns the time (in seconds) that has passed since entity connected to the server (entity must be a player)."
Data["timerAdjust(s,f)"] = "Changes the function being used by a timer."
Data["timerAdjust(s,n,n)"] = "Modify an existing timer with (string name), (number time), (number repetitions)."
Data["timerAutoRemove(s,b)"] = "Sets a timer to remove itself once it has exspired."
Data["timerCreate(s,n,n,f)"] = "Create a timer with (string name), (number time), (number repetitions), (function to execute)."
Data["timerCreate(s,n,n,f,b)"] = "Create a timer with (string name), (number time), (number repetitions), (function to execute), (boolean remove once exspired)."
Data["timerCreate(s,n,n,f,b,...)"] = "Create a timer with (string name), (number time), (number repetitions), (function to execute), (boolean remove once exspired), (vararg passed to function)."
Data["timerPause(s=n)"] = "Pause a timer."
Data["timerRemove(s)"] = "Remove a timer."
Data["timerRepetitions(s=n)"] = "Gets the current repetitions of a timer."
Data["timerStart(s=n)"] = "Start a timer."
Data["timerStatus(s=n)"] = "Gets the status of a timer as a number."
Data["timerStop(s=n)"] = "Stop a timer."
Data["timerUnpause(s=n)"] = "Unpause a timer."
Data["toAngle(q:=a)"] = "Converts a quaternion to an angle."
Data["toAngle(v:=a)"] = "Convert a vector to an angle."
Data["toAngle(v:v=a)"] = "Convert 2 vectors to an angle."
Data["toByte(s=n)"] = "Returns the ascii code of first character in a string."
Data["toChar(n=s)"] = "Returns a one-character string from its ASCII code, where 32 = argument 1 = 255. An empty string is returned for numbers outside that range."
Data["toDeg(n=n)"] = "Converts (number radians) to degrees."
Data["toLocal(e:a=a)"] = "Converts an angle to a local angle."
Data["toLocal(e:v=v)"] = "Converts a vector to a local vector."
Data["toLocal(p:v=v)"] = "Converts a vector to a local vector."
Data["toLocalAng(v,a,v,a=a)"] = "Converts a local angle to a world angle."
Data["toLocalAxis(e:v=v)"] = "Converts a world axis to an axis local to the entity."
Data["toLocalPos(v,a,v,a=v)"] = "Converts a local vector to a world vector."
Data["toRad(n=n)"] = "Converts (number degrees) to radians."
Data["toString(c:=s)"] = "Converts a color to a string."
Data["toTable(xa*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xc*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xe*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xh*:=t)"] = ""
Data["toTable(xn*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xq*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xs*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xt*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xv*:=t)"] = "Turns an array into a (slower) table object."
Data["toTable(xwl*:=t)"] = ""
Data["toTable(xxv2*:=t)"] = "Turns an array into a (slower) table object."
Data["toUnit(s,n=n)"] = "Converts messurment to gmod units."
Data["toWorld(e:a=a)"] = "Converts an angle to a world angle."
Data["toWorld(e:v=v)"] = "Converts a vector to a world vector."
Data["toWorld(p:v=v)"] = "Converts a vector to a world vector"
Data["toWorldAng(v,a,v,a=a)"] = "Converts a local angle to a world angle."
Data["toWorldAxis(e:v=v)"] = "Converts a local axis to a world axis."
Data["toWorldPos(v,a,v,a=v)"] = "Converts a local vector to a world vector."
Data["tostring(?=s)"] = "Converts a variant to a string."
Data["trace(!:=t)"] = "Returns a table of traces on the stack."
Data["trace(!:n=t)"] = "Returns a trace at stack position N"
Data["trace(=xtr)"] = "Creates a trace."
Data["trace(v,v,n=xtr)"] = "Creates a trace from (vector start) facing (vector direction) with (number length)."
Data["trace(v,v=xtr)"] = "Creates a trace from (vector start) to (vector finish)."
Data["trim(s:=s)"] = "Remove spaces from the beginning and end of a string."
Data["trim(s:s=s)"] = ""
Data["trimLeft(s:s=s)"] = ""
Data["trimRight(s:s=s)"] = ""
Data["type(!:=s)"] = "Returns the true type of an Exception"
Data["type(?=s)"] = "Returns the type of the object held inside a variant."
Data["type(t:e=s)"] = "Returns the type of obect stored in table at index."
Data["type(t:n=s)"] = "Returns the type of obect stored in table at index."
Data["type(t:s=s)"] = "Returns the type of obect stored in table at index."
Data["type(xbf:=s)"] = "Returns the type of next object on a buffer."
Data["type(xbf:n=s)"] = "Returns the type of object on buffer at inded."

// U
Data["unParent(h:)"] = "Unparents H from its parent."
Data["unblockPlayer(h:e)"] = "unblocks a player from seeing the hologram, allow them to see it again."
Data["unfilter(xrd:e)"] = "Removes E from a rangers filter."
Data["unpack(t=...)"] = "Unpacks a table into a vararg."
Data["unparent(e:)"] = "Unparents E from its parent."
Data["unshift(t:!)"] = "unshift value of a table."
Data["unshift(t:?)"] = "unshift value of a table."
Data["unshift(t:a)"] = "unshift value of a table."
Data["unshift(t:b)"] = "unshift value of a table."
Data["unshift(t:c)"] = "unshift value of a table."
Data["unshift(t:e)"] = "unshift value of a table."
Data["unshift(t:f)"] = "unshift value of a table."
Data["unshift(t:h)"] = "unshift value of a table."
Data["unshift(t:n)"] = "unshift value of a table."
Data["unshift(t:n,!)"] = "unshift value of a table at index N."
Data["unshift(t:n,?)"] = "unshift value of a table at index N."
Data["unshift(t:n,a)"] = "unshift value of a table at index N."
Data["unshift(t:n,b)"] = "unshift value of a table at index N."
Data["unshift(t:n,c)"] = "unshift value of a table at index N."
Data["unshift(t:n,e)"] = "unshift value of a table at index N."
Data["unshift(t:n,f)"] = "unshift value of a table at index N."
Data["unshift(t:n,h)"] = "unshift value of a table at index N."
Data["unshift(t:n,n)"] = "unshift value of a table at index N."
Data["unshift(t:n,p)"] = "unshift value of a table at index N."
Data["unshift(t:n,q)"] = "unshift value of a table at index N."
Data["unshift(t:n,s)"] = "unshift value of a table at index N."
Data["unshift(t:n,t)"] = "unshift value of a table at index N."
Data["unshift(t:n,v)"] = "unshift value of a table at index N."
Data["unshift(t:n,xbf)"] = "unshift value of a table at index N."
Data["unshift(t:n,xcr)"] = "unshift value of a table at index N."
Data["unshift(t:n,xrd)"] = "unshift value of a table at index N."
Data["unshift(t:n,xsd)"] = "unshift value of a table at index N."
Data["unshift(t:n,xtr)"] = "unshift value of a table at index N."
Data["unshift(t:n,xv2)"] = "unshift value of a table at index N."
Data["unshift(t:n,xwl)"] = "unshift value of a table at index N."
Data["unshift(t:p)"] = "unshift value of a table."
Data["unshift(t:q)"] = "unshift value of a table."
Data["unshift(t:s)"] = "unshift value of a table."
Data["unshift(t:t)"] = "unshift value of a table."
Data["unshift(t:v)"] = "unshift value of a table."
Data["unshift(t:xbf)"] = "unshift value of a table."
Data["unshift(t:xcr)"] = "unshift value of a table."
Data["unshift(t:xrd)"] = "unshift value of a table."
Data["unshift(t:xsd)"] = "unshift value of a table."
Data["unshift(t:xtr)"] = "unshift value of a table."
Data["unshift(t:xv2)"] = "unshift value of a table."
Data["unshift(t:xwl)"] = "unshift value of a table."
Data["up(a:=v)"] = "Returns the up vector of an angle."
Data["up(e:=v)"] = "Returns the up vector of an entity."
Data["up(p:=v)"] = "Returns the up vector of a physics object."
Data["up(q:=v)"] = "Returns the up vector of a quaternion."
Data["update(xtr:)"] = "Gets updated trace results from a trace."
Data["upper(s:=s)"] = "Returns an uppercased string."
Data["useLineOfSight(xtr:b)"] = "Trace Mask: "

// V
Data["values(t:=t)"] = ""
Data["vec(=v)"] = "Creates a 3 dimentional vector."
Data["vec(n,n,n=v)"] = "Creates a 3 dimentional vector."
Data["vec(n=v)"] = "Creates a 3 dimentional vector."
Data["vec(q=v)"] = "Creates a vector from a quaternion."
Data["vec2(n,n=xv2)"] = "Creates a 2 dimentional vector."
Data["vector2Array(...=xxv2*)"] = "Creates an array."
Data["vector2Array(=xxv2*)"] = "Creates an array."
Data["vectorArray(...=xv*)"] = "Creates an array."
Data["vectorArray(=xv*)"] = "Creates an array."
Data["vehicle(e:=e)"] = "Returns the vehicle entity is riding in (entity must be a player)."
Data["vel(e:=v)"] = "Returns the velocity of an entity."
Data["vel(p:=v)"] = "Returns the velocity of a physics object."
Data["velL(e:=v)"] = "Returns the local velocity of an entity."
Data["visible(h:b)"] = "Enables or disables visibility of a hologram."
Data["voidEntity(=e)"] = "Returns a null entity."
Data["volume(e:=n)"] = "Returns the obb volume of the entity."
Data["volume(xsd:=n)"] = "Returns the volume of a sound."
Data["volume(xsd:n)"] = "Sets the volume of a sound."

// W
Data["wait(s)"] = "Pauses the current coroutine until event S is called."
Data["wirelinkArray(...=xwl*)"] = ""
Data["wirelinkArray(=xwl*)"] = ""
Data["world(=e)"] = "Returns the world entity."
Data["writeAngle(xbf:a)"] = "Writes an angle onto a buffer."
Data["writeBool(xbf:b)"] = "Writes a boolean onto a buffer."
Data["writeCell(xwl:n,n=b)"] = "Writes to high speed memory on the linked component."
Data["writeEntity(xbf:e)"] = "Writes an entity onto a buffer."
Data["writeNumber(xbf:n)"] = "Writes a number onto a buffer."
Data["writePos(xbf:=n)"] = "Returns the current Write position on the buffer."
Data["writeString(xbf:s)"] = "Writes a string onto a buffer."
Data["writeString(xwl:n,s=n)"] = "Writes a string to highspeed wirelink."
Data["writeString(xwl:s,n,n)"] = "A helper function for using the Wired Console Screen. (Text, X, Y)."
Data["writeString(xwl:s,n,n,c)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col) "
Data["writeString(xwl:s,n,n,c,c)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col, BG Color) "
Data["writeString(xwl:s,n,n,c,c,b)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col, BG Color, Flash) "
Data["writeString(xwl:s,n,n,c,n)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,c,n,b)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,n)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,n,c)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,n,c,b)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,n,n)"] = "A helper function for using the Wired Console Screen."
Data["writeString(xwl:s,n,n,n,n,b)"] = "A helper function for using the Wired Console Screen."
Data["writeTable(xwl:n,t=n)"] = "Writes a table to highspeed wirelink, this includes sub tables."
Data["writeVector(xbf:v)"] = "Writes a vector onto a buffer."

// X
Data["x(v:=n)"] = "Returns the X component of a vector."
Data["x(xv2:=n)"] = "Returns the X component of a vector."

// Y
Data["y(a:=n)"] = "Returns the yaw component of an angle (replaced with getYaw)."
Data["y(v:=n)"] = "Returns the Y component of a vector."
Data["y(xv2:=n)"] = "Returns the Y component of a vector."
Data["yield()"] = "Yields the current coroutine to be resumed later."

// Z
Data["z(v:=n)"] = "Returns the Z component of a vector."